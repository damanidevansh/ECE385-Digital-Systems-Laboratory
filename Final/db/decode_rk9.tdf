--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX 10" LPM_DECODES=25 LPM_WIDTH=5 data eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 36 
SUBDESIGN decode_rk9
( 
	data[4..0]	:	input;
	eq[24..0]	:	output;
) 
VARIABLE 
	data_wire[4..0]	: WIRE;
	eq_node[24..0]	: WIRE;
	eq_wire[31..0]	: WIRE;
	w_anode458w[2..0]	: WIRE;
	w_anode472w[3..0]	: WIRE;
	w_anode489w[3..0]	: WIRE;
	w_anode499w[3..0]	: WIRE;
	w_anode509w[3..0]	: WIRE;
	w_anode519w[3..0]	: WIRE;
	w_anode529w[3..0]	: WIRE;
	w_anode539w[3..0]	: WIRE;
	w_anode549w[3..0]	: WIRE;
	w_anode561w[2..0]	: WIRE;
	w_anode571w[3..0]	: WIRE;
	w_anode582w[3..0]	: WIRE;
	w_anode592w[3..0]	: WIRE;
	w_anode602w[3..0]	: WIRE;
	w_anode612w[3..0]	: WIRE;
	w_anode622w[3..0]	: WIRE;
	w_anode632w[3..0]	: WIRE;
	w_anode642w[3..0]	: WIRE;
	w_anode653w[2..0]	: WIRE;
	w_anode663w[3..0]	: WIRE;
	w_anode674w[3..0]	: WIRE;
	w_anode684w[3..0]	: WIRE;
	w_anode694w[3..0]	: WIRE;
	w_anode704w[3..0]	: WIRE;
	w_anode714w[3..0]	: WIRE;
	w_anode724w[3..0]	: WIRE;
	w_anode734w[3..0]	: WIRE;
	w_anode745w[2..0]	: WIRE;
	w_anode755w[3..0]	: WIRE;
	w_anode766w[3..0]	: WIRE;
	w_anode776w[3..0]	: WIRE;
	w_anode786w[3..0]	: WIRE;
	w_anode796w[3..0]	: WIRE;
	w_anode806w[3..0]	: WIRE;
	w_anode816w[3..0]	: WIRE;
	w_anode826w[3..0]	: WIRE;
	w_data456w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	eq[] = eq_node[];
	eq_node[24..0] = eq_wire[24..0];
	eq_wire[] = ( ( w_anode826w[3..3], w_anode816w[3..3], w_anode806w[3..3], w_anode796w[3..3], w_anode786w[3..3], w_anode776w[3..3], w_anode766w[3..3], w_anode755w[3..3]), ( w_anode734w[3..3], w_anode724w[3..3], w_anode714w[3..3], w_anode704w[3..3], w_anode694w[3..3], w_anode684w[3..3], w_anode674w[3..3], w_anode663w[3..3]), ( w_anode642w[3..3], w_anode632w[3..3], w_anode622w[3..3], w_anode612w[3..3], w_anode602w[3..3], w_anode592w[3..3], w_anode582w[3..3], w_anode571w[3..3]), ( w_anode549w[3..3], w_anode539w[3..3], w_anode529w[3..3], w_anode519w[3..3], w_anode509w[3..3], w_anode499w[3..3], w_anode489w[3..3], w_anode472w[3..3]));
	w_anode458w[] = ( (w_anode458w[1..1] & (! data_wire[4..4])), (w_anode458w[0..0] & (! data_wire[3..3])), B"1");
	w_anode472w[] = ( (w_anode472w[2..2] & (! w_data456w[2..2])), (w_anode472w[1..1] & (! w_data456w[1..1])), (w_anode472w[0..0] & (! w_data456w[0..0])), w_anode458w[2..2]);
	w_anode489w[] = ( (w_anode489w[2..2] & (! w_data456w[2..2])), (w_anode489w[1..1] & (! w_data456w[1..1])), (w_anode489w[0..0] & w_data456w[0..0]), w_anode458w[2..2]);
	w_anode499w[] = ( (w_anode499w[2..2] & (! w_data456w[2..2])), (w_anode499w[1..1] & w_data456w[1..1]), (w_anode499w[0..0] & (! w_data456w[0..0])), w_anode458w[2..2]);
	w_anode509w[] = ( (w_anode509w[2..2] & (! w_data456w[2..2])), (w_anode509w[1..1] & w_data456w[1..1]), (w_anode509w[0..0] & w_data456w[0..0]), w_anode458w[2..2]);
	w_anode519w[] = ( (w_anode519w[2..2] & w_data456w[2..2]), (w_anode519w[1..1] & (! w_data456w[1..1])), (w_anode519w[0..0] & (! w_data456w[0..0])), w_anode458w[2..2]);
	w_anode529w[] = ( (w_anode529w[2..2] & w_data456w[2..2]), (w_anode529w[1..1] & (! w_data456w[1..1])), (w_anode529w[0..0] & w_data456w[0..0]), w_anode458w[2..2]);
	w_anode539w[] = ( (w_anode539w[2..2] & w_data456w[2..2]), (w_anode539w[1..1] & w_data456w[1..1]), (w_anode539w[0..0] & (! w_data456w[0..0])), w_anode458w[2..2]);
	w_anode549w[] = ( (w_anode549w[2..2] & w_data456w[2..2]), (w_anode549w[1..1] & w_data456w[1..1]), (w_anode549w[0..0] & w_data456w[0..0]), w_anode458w[2..2]);
	w_anode561w[] = ( (w_anode561w[1..1] & (! data_wire[4..4])), (w_anode561w[0..0] & data_wire[3..3]), B"1");
	w_anode571w[] = ( (w_anode571w[2..2] & (! w_data456w[2..2])), (w_anode571w[1..1] & (! w_data456w[1..1])), (w_anode571w[0..0] & (! w_data456w[0..0])), w_anode561w[2..2]);
	w_anode582w[] = ( (w_anode582w[2..2] & (! w_data456w[2..2])), (w_anode582w[1..1] & (! w_data456w[1..1])), (w_anode582w[0..0] & w_data456w[0..0]), w_anode561w[2..2]);
	w_anode592w[] = ( (w_anode592w[2..2] & (! w_data456w[2..2])), (w_anode592w[1..1] & w_data456w[1..1]), (w_anode592w[0..0] & (! w_data456w[0..0])), w_anode561w[2..2]);
	w_anode602w[] = ( (w_anode602w[2..2] & (! w_data456w[2..2])), (w_anode602w[1..1] & w_data456w[1..1]), (w_anode602w[0..0] & w_data456w[0..0]), w_anode561w[2..2]);
	w_anode612w[] = ( (w_anode612w[2..2] & w_data456w[2..2]), (w_anode612w[1..1] & (! w_data456w[1..1])), (w_anode612w[0..0] & (! w_data456w[0..0])), w_anode561w[2..2]);
	w_anode622w[] = ( (w_anode622w[2..2] & w_data456w[2..2]), (w_anode622w[1..1] & (! w_data456w[1..1])), (w_anode622w[0..0] & w_data456w[0..0]), w_anode561w[2..2]);
	w_anode632w[] = ( (w_anode632w[2..2] & w_data456w[2..2]), (w_anode632w[1..1] & w_data456w[1..1]), (w_anode632w[0..0] & (! w_data456w[0..0])), w_anode561w[2..2]);
	w_anode642w[] = ( (w_anode642w[2..2] & w_data456w[2..2]), (w_anode642w[1..1] & w_data456w[1..1]), (w_anode642w[0..0] & w_data456w[0..0]), w_anode561w[2..2]);
	w_anode653w[] = ( (w_anode653w[1..1] & data_wire[4..4]), (w_anode653w[0..0] & (! data_wire[3..3])), B"1");
	w_anode663w[] = ( (w_anode663w[2..2] & (! w_data456w[2..2])), (w_anode663w[1..1] & (! w_data456w[1..1])), (w_anode663w[0..0] & (! w_data456w[0..0])), w_anode653w[2..2]);
	w_anode674w[] = ( (w_anode674w[2..2] & (! w_data456w[2..2])), (w_anode674w[1..1] & (! w_data456w[1..1])), (w_anode674w[0..0] & w_data456w[0..0]), w_anode653w[2..2]);
	w_anode684w[] = ( (w_anode684w[2..2] & (! w_data456w[2..2])), (w_anode684w[1..1] & w_data456w[1..1]), (w_anode684w[0..0] & (! w_data456w[0..0])), w_anode653w[2..2]);
	w_anode694w[] = ( (w_anode694w[2..2] & (! w_data456w[2..2])), (w_anode694w[1..1] & w_data456w[1..1]), (w_anode694w[0..0] & w_data456w[0..0]), w_anode653w[2..2]);
	w_anode704w[] = ( (w_anode704w[2..2] & w_data456w[2..2]), (w_anode704w[1..1] & (! w_data456w[1..1])), (w_anode704w[0..0] & (! w_data456w[0..0])), w_anode653w[2..2]);
	w_anode714w[] = ( (w_anode714w[2..2] & w_data456w[2..2]), (w_anode714w[1..1] & (! w_data456w[1..1])), (w_anode714w[0..0] & w_data456w[0..0]), w_anode653w[2..2]);
	w_anode724w[] = ( (w_anode724w[2..2] & w_data456w[2..2]), (w_anode724w[1..1] & w_data456w[1..1]), (w_anode724w[0..0] & (! w_data456w[0..0])), w_anode653w[2..2]);
	w_anode734w[] = ( (w_anode734w[2..2] & w_data456w[2..2]), (w_anode734w[1..1] & w_data456w[1..1]), (w_anode734w[0..0] & w_data456w[0..0]), w_anode653w[2..2]);
	w_anode745w[] = ( (w_anode745w[1..1] & data_wire[4..4]), (w_anode745w[0..0] & data_wire[3..3]), B"1");
	w_anode755w[] = ( (w_anode755w[2..2] & (! w_data456w[2..2])), (w_anode755w[1..1] & (! w_data456w[1..1])), (w_anode755w[0..0] & (! w_data456w[0..0])), w_anode745w[2..2]);
	w_anode766w[] = ( (w_anode766w[2..2] & (! w_data456w[2..2])), (w_anode766w[1..1] & (! w_data456w[1..1])), (w_anode766w[0..0] & w_data456w[0..0]), w_anode745w[2..2]);
	w_anode776w[] = ( (w_anode776w[2..2] & (! w_data456w[2..2])), (w_anode776w[1..1] & w_data456w[1..1]), (w_anode776w[0..0] & (! w_data456w[0..0])), w_anode745w[2..2]);
	w_anode786w[] = ( (w_anode786w[2..2] & (! w_data456w[2..2])), (w_anode786w[1..1] & w_data456w[1..1]), (w_anode786w[0..0] & w_data456w[0..0]), w_anode745w[2..2]);
	w_anode796w[] = ( (w_anode796w[2..2] & w_data456w[2..2]), (w_anode796w[1..1] & (! w_data456w[1..1])), (w_anode796w[0..0] & (! w_data456w[0..0])), w_anode745w[2..2]);
	w_anode806w[] = ( (w_anode806w[2..2] & w_data456w[2..2]), (w_anode806w[1..1] & (! w_data456w[1..1])), (w_anode806w[0..0] & w_data456w[0..0]), w_anode745w[2..2]);
	w_anode816w[] = ( (w_anode816w[2..2] & w_data456w[2..2]), (w_anode816w[1..1] & w_data456w[1..1]), (w_anode816w[0..0] & (! w_data456w[0..0])), w_anode745w[2..2]);
	w_anode826w[] = ( (w_anode826w[2..2] & w_data456w[2..2]), (w_anode826w[1..1] & w_data456w[1..1]), (w_anode826w[0..0] & w_data456w[0..0]), w_anode745w[2..2]);
	w_data456w[2..0] = data_wire[2..0];
END;
--VALID FILE

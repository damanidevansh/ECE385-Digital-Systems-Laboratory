//ECE 385 USB Host Shield code
//based on Circuits-at-home USB Host code 1.x
//to be used for ECE 385 course materials
//Revised October 2020 - Zuofu Cheng
#define _MAX3421E_C_

#include "system.h"
#include "stdlib.h"
#include "stdio.h"
#include "string.h"
#include "../usb_kb/project_config.h"
#include "altera_avalon_spi.h"
#include "altera_avalon_spi_regs.h"
#include "altera_avalon_pio_regs.h"
#include <sys/alt_stdio.h>
#include <unistd.h>

//variables and data structures
//External variables
extern BYTE usb_task_state;
int ret_code;
alt_u8 wdata, rdata;
/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
	//Don't need to initialize SPI port, already ready to go with BSP
}

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
	//This function is never used by the code, so you do not need to fill it in
}

//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	BYTE data[2];
	//write reg + 2 via SPI
	data[0]= reg+2;
	//write val via SPI
	data[1] = val;
	ret_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2, data, 0, &rdata, 0);

	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	if (ret_code < 0) printf("ERROR SPI RET = %x \n" , ret_code);
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	return;
}
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	BYTE indata[nbytes+1];
	//write reg + 2 via SPI
	indata[0] = reg+2;
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	for (int i = 0; i < nbytes; i++) indata[i+1] = data[i];
	ret_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes+1, indata, 0, &rdata, 0);
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0  print an error
	if (ret_code < 0) printf("ERROR SPI RET = %x \n" , ret_code);
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	return (data + nbytes);
}

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg via SPI
	//read val via SPI
	wdata = reg;
	ret_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1, &wdata, 2, &rdata, 0);
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	if (ret_code < 0) printf("ERROR SPI RET = %x \n" , ret_code);
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	return rdata;
}
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
	wdata = reg;
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg via SPI
	//read data[n] from SPI, where n goes from 0 to nbytes-1
	ret_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1, &(wdata), nbytes+1, data, 0);
	if (ret_code < 0) printf("ERROR SPI RET = %x \n" , ret_code);
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	return (data + nbytes);
}

/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
	// power on/off successful
	return (1);
}

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
				printf("Starting in low speed\n");
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
	MAX3421E_reset();                                //stop/start the oscillator
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
	Vbus_power( ON);
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
	MAX_busprobe();                             //check if anything is connected
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
}

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
		printf("MAX interrupt\n\r");
		MaxIntHandler();
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
		printf("GPX interrupt\n\r");
		MaxGpxHandler();
	}
}

void MaxIntHandler(void) {
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
	printf("IRQ: %x\n", HIRQ);
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
		HIRQ_sendback |= bmFRAMEIRQ;
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
		MAX_busprobe();
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
		usb_task_state++;                       //advance USB task state machine
		HIRQ_sendback |= bmBUSEVENTIRQ;
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
}

void MaxGpxHandler(void) {
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
}

//
//#include <stdio.h>
//#include "system.h"
//#include "altera_avalon_spi.h"
//#include "altera_avalon_spi_regs.h"
//#include "altera_avalon_pio_regs.h"
//#include "sys/alt_irq.h"
//#include "usb_kb/GenericMacros.h"
//#include "usb_kb/GenericTypeDefs.h"
//#include "usb_kb/HID.h"
//#include "usb_kb/MAX3421E.h"
//#include "usb_kb/transfer.h"
//#include "usb_kb/usb_ch9.h"
//#include "usb_kb/USB.h"
//
//extern HID_DEVICE hid_device;
//
//static BYTE addr = 1; 				//hard-wired USB address
//const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };
//
//BYTE GetDriverandReport() {
//	BYTE i;
//	BYTE rcode;
//	BYTE device = 0xFF;
//	BYTE tmpbyte;
//
//	DEV_RECORD* tpl_ptr;
//	printf("Reached USB_STATE_RUNNING (0x40)\n");
//	for (i = 1; i < USB_NUMDEVICES; i++) {
//		tpl_ptr = GetDevtable(i);
//		if (tpl_ptr->epinfo != NULL) {
//			printf("Device: %d", i);
//			printf("%s \n", devclasses[tpl_ptr->devclass]);
//			device = tpl_ptr->devclass;
//		}
//	}
//	//Query rate and protocol
//	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
//	if (rcode) {   //error handling
//		printf("GetIdle Error. Error code: ");
//		printf("%x \n", rcode);
//	} else {
//		printf("Update rate: ");
//		printf("%x \n", tmpbyte);
//	}
//	printf("Protocol: ");
//	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
//	if (rcode) {   //error handling
//		printf("GetProto Error. Error code ");
//		printf("%x \n", rcode);
//	} else {
//		printf("%d \n", tmpbyte);
//	}
//	return device;
//}
//
//void setLED(int LED) {
//	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
//			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
//}
//
//void clearLED(int LED) {
//	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
//			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));
//
//}
//
//void printSignedHex0(signed char value) {
//	BYTE tens = 0;
//	BYTE ones = 0;
//	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
//	if (value < 0) {
//		setLED(11);
//		value = -value;
//	} else {
//		clearLED(11);
//	}
//	//handled hundreds
//	if (value / 100)
//		setLED(13);
//	else
//		clearLED(13);
//
//	value = value % 100;
//	tens = value / 10;
//	ones = value % 10;
//
//	pio_val &= 0x00FF;
//	pio_val |= (tens << 12);
//	pio_val |= (ones << 8);
//
//	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
//}
//
//void printSignedHex1(signed char value) {
//	BYTE tens = 0;
//	BYTE ones = 0;
//	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
//	if (value < 0) {
//		setLED(10);
//		value = -value;
//	} else {
//		clearLED(10);
//	}
//	//handled hundreds
//	if (value / 100)
//		setLED(12);
//	else
//		clearLED(12);
//
//	value = value % 100;
//	tens = value / 10;
//	ones = value % 10;
//	tens = value / 10;
//	ones = value % 10;
//
//	pio_val &= 0xFF00;
//	pio_val |= (tens << 4);
//	pio_val |= (ones << 0);
//
//	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
//}
//
//void setKeycode(WORD keycode)
//{
//	IOWR_ALTERA_AVALON_PIO_DATA(KEY_BASE, keycode);
//}
//int main() {
//	BYTE rcode;
//	BOOT_MOUSE_REPORT buf;		//USB mouse report
//	BOOT_KBD_REPORT kbdbuf;
//
//	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
//	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
//	BYTE device;
//	WORD keycode;
//
//	printf("initializing MAX3421E...\n");
//	MAX3421E_init();
//	printf("initializing USB...\n");
//	USB_init();
//	while (1) {
//		printf(".");
//		MAX3421E_Task();
//		USB_Task();
//		//usleep (500000);
//		if (GetUsbTaskState() == USB_STATE_RUNNING) {
//			if (!runningdebugflag) {
//				runningdebugflag = 1;
//				setLED(9);
//				device = GetDriverandReport();
//			} else if (device == 1) {
//				//run keyboard debug polling
//				rcode = kbdPoll(&kbdbuf);
//				if (rcode == hrNAK) {
//					continue; //NAK means no new data
//				} else if (rcode) {
//					printf("Rcode: ");
//					printf("%x \n", rcode);
//					continue;
//				}
//				printf("keycodes: ");
//				for (int i = 0; i < 6; i++) {
//					printf("%x ", kbdbuf.keycode[i]);
//				}
//				setKeycode(kbdbuf.keycode[0]);
//				printSignedHex0(kbdbuf.keycode[0]);
//				printSignedHex1(kbdbuf.keycode[1]);
//				printf("\n");
//			}
//
//			else if (device == 2) {
//				rcode = mousePoll(&buf);
//				if (rcode == hrNAK) {
//					//NAK means no new data
//					continue;
//				} else if (rcode) {
//					printf("Rcode: ");
//					printf("%x \n", rcode);
//					continue;
//				}
//				printf("X displacement: ");
//				printf("%d ", (signed char) buf.Xdispl);
//				printSignedHex0((signed char) buf.Xdispl);
//				printf("Y displacement: ");
//				printf("%d ", (signed char) buf.Ydispl);
//				printSignedHex1((signed char) buf.Ydispl);
//				printf("Buttons: ");
//				printf("%x\n", buf.button);
//				if (buf.button & 0x04)
//					setLED(2);
//				else
//					clearLED(2);
//				if (buf.button & 0x02)
//					setLED(1);
//				else
//					clearLED(1);
//				if (buf.button & 0x01)
//					setLED(0);
//				else
//					clearLED(0);
//			}
//		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
//			if (!errorflag) {
//				errorflag = 1;
//				clearLED(9);
//				printf("USB Error State\n");
//				//print out string descriptor here
//			}
//		} else //not in USB running state
//		{
//
//			printf("USB task state: ");
//			printf("%x\n", GetUsbTaskState());
//			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
//				runningdebugflag = 0;
//				MAX3421E_init();
//				USB_init();
//			}
//			errorflag = 0;
//			clearLED(9);
//		}
//
//	}
//	return 0;
//}
